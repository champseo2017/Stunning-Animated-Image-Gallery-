body,
html {
  margin: 0;
  padding: 0;
  background: white;
  color: white;
  overflow: hidden;
  -webkit-overflow-scrolling: hidden;
  user-select: none;
  -webkit-user-select: none;
  cursor: pointer;
}

section {
  width: 100%; /* กำหนดให้ section มีความกว้างเท่ากับ 100% ของความกว้างของ element แม่, ทำให้เต็มความกว้างของหน้าจอหรือ container */
  height: 100vh; /* กำหนดให้ section มีความสูงเท่ากับ 100% ของความสูงของ viewport, ทำให้เต็มความสูงของหน้าจอ */
  overflow: hidden; /* ซ่อนเนื้อหาที่เกินขอบเขตของ section, ป้องกันไม่ให้เนื้อหาที่เกินขอบเขตแสดงออกมานอก section */
  background: radial-gradient(
    rgba(0, 0, 0.9) 9%,
    black 9%
  ); /* สร้างพื้นหลังเป็นลวดลาย radial-gradient โดยเริ่มจากสีที่มีความโปร่งใส 90% ในรัศมี 9% และเปลี่ยนเป็นสีดำที่รัศมีเดียวกัน, สร้างลวดลายที่มีลักษณะเป็นวงกลมหรือแสงสว่างที่กระจายออกมา */
  background-size: 30px 30px;
}

.wrapper {
  width: fit-content; /* กำหนดความกว้างให้พอดีกับเนื้อหา */
  height: fit-content; /* กำหนดความสูงให้พอดีกับเนื้อหา */
  position: absolute; /* ตั้งค่าตำแหน่งแบบอิสระจาก flow ปกติของเอกสาร */
  top: 50%; /* ย้ายจุดเริ่มต้นของ .wrapper ไปที่ 50% จากด้านบนของ parent */
  left: 50%; /* ย้ายจุดเริ่มต้นของ .wrapper ไปที่ 50% จากด้านซ้ายของ parent */
  transform: translate(
    -50%,
    -50%
  ); /* เลื่อน .wrapper กลับมาทางซ้ายและขึ้นบนครึ่งหนึ่งของขนาดของตัวมันเอง */
  transition: all 0.5s ease; /* เมื่อมีการเปลี่ยนแปลงคุณสมบัติใดๆ ของ .wrapper (เช่น ขนาด, ตำแหน่ง, สี) การเปลี่ยนแปลงจะเกิดขึ้นอย่างเรียบเนียนในระยะเวลา 0.5 วินาที โดยใช้การเปลี่ยนแปลงแบบ 'ease' ซึ่งเริ่มช้า ค่อยๆ เร็วขึ้น และสิ้นสุดด้วยความเร็วที่ลดลง */
}

.center {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

.center h1 {
  font-size: 9rem;
  margin: 0;
  background-image: linear-gradient(45deg, magenta 25%, blue);
  -webkit-background-clip: text;
  background-clip: text; /* คือคำสั่ง CSS ที่ใช้กำหนดว่าพื้นหลังควรถูกตัดตามขอบเขตของข้อความ ทำให้พื้นหลังแสดงผลเฉพาะบริเวณข้อความเท่านั้น  */
  -webkit-text-fill-color: transparent;
  -moz-background-clip: text;
  -moz-text-fill-color: transparent;
}

.center h2 {
  font-size: 3rem;
  margin-top: -1rem;
}

.images {
  display: flex; /* กำหนดให้ element ภายใน .images เรียงตัวกันแบบ flexbox */
  flex-wrap: nowrap; /* ไม่อนุญาตให้ items ยืดหยุ่นหรือ wrap ไปยังบรรทัดถัดไป */
  align-items: center; /* จัดให้ items อยู่ตรงกลางแนวตั้ง */
  width: fit-content; /* กำหนดความกว้างของ .images ให้พอดีกับเนื้อหาภายใน */
  height: fit-content; /* กำหนดความสูงของ .images ให้พอดีกับเนื้อหาภายใน */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.column {
  margin: 0 30px;
  margin-top: 7vh;
}

.column:nth-child(odd) {
  margin-top: -7vh;
}

.image {
  width: 300px; /* กำหนดความกว้างของภาพเป็น 300 พิกเซล */
  height: 400px; /* กำหนดความสูงของภาพเป็น 400 พิกเซล */
  overflow: hidden; /* ซ่อนเนื้อหาที่เกินขอบเขตของภาพ */
  border-radius: 1rem; /* กำหนดขอบมนของภาพเป็น 1 rem */
  margin: 5vh 0; /* กำหนดระยะห่างด้านบนและด้านล่างของภาพเป็น 5vh (5% ของความสูงของ viewport) */
  transform: scale(0); /* เริ่มต้นด้วยการทำให้ภาพมีขนาดเล็กลงจนไม่มองเห็น */
  transition: transform 0.8s ease; /* กำหนดให้การเปลี่ยนแปลงของ transform เกิดขึ้นอย่างราบรื่นภายใน 0.8 วินาที */
  animation: fadeIn 0.8s ease; /* ใช้งาน animation ที่ชื่อ fadeIn ด้วยระยะเวลา 0.8 วินาทีและเอฟเฟกต์การเปลี่ยนแปลงแบบ ease */
  animation-delay: 1s; /* เริ่ม animation หลังจากล่าช้า 1 วินาที */
  animation-fill-mode: forwards; /* หลังจาก animation จบ ให้ภาพคงสถานะที่สิ้นสุดของ animation */
}

.image:nth-child(odd) {
  animation-delay: 1.2s;
}

.image img {
  width: 100%;
  height: 100%;
  object-fit: cover; /* ปรับรูปภาพให้ครอบคลุมพื้นที่โดยไม่เปลี่ยนแปลงอัตราส่วน อาจจะตัดบางส่วนออกถ้าจำเป็น */
  pointer-events: none; /* ป้องกันการโต้ตอบกับรูปภาพ เช่น คลิกหรือเลื่อน */
  transition: all 0.6s ease; /* ให้การเปลี่ยนแปลงทุกอย่างเกิดขึ้นอย่างราบรื่นภายใน 0.6 วินาที */
}

.space {
  height: 500px;
}

/* Animations */
@keyframes fadeIn {
  0% {
    transform: scale(
      0
    ); /* เริ่มต้น animation ด้วยการทำให้ element มีขนาดเล็กลงจนไม่มองเห็น (หดเล็กสุด) */
  }
  100% {
    transform: scale(
      1
    ); /* สิ้นสุด animation ด้วยการทำให้ element กลับมามีขนาดปกติ */
  }
}
